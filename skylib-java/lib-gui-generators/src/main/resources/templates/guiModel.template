package ${package};

import java.util.Arrays;
import ch.skymarshall.gui.mvc.GuiModel;
import ch.skymarshall.gui.mvc.IComponentBinding;
import ch.skymarshall.gui.mvc.IComponentLink;
import ch.skymarshall.gui.mvc.IObjectGuiModel;
import ch.skymarshall.gui.mvc.factories.Persisters;
import ch.skymarshall.gui.mvc.persisters.ObjectProviderPersister;
import ch.skymarshall.gui.mvc.properties.AbstractProperty;
import ch.skymarshall.gui.mvc.properties.Configuration;
${imports}

public class ${modelClass} extends GuiModel implements IObjectGuiModel<${objectClass}> {
   
    private final ObjectProviderPersister.CurrentObjectProvider<${objectClass}> currentObjectProvider = new ObjectProviderPersister.CurrentObjectProvider<>();

	${fields.declareStatic}

	${fields.declare}
	
	protected final AbstractProperty[] allProperties;
	
    public ${modelClass}(final String prefix, ModelConfiguration config) {
		super(config.ifNotSet(()->	GuiModel.createErrorProperty(prefix + "-${objectClassSimpleName}-Error", config)));
		${fields.init}
		allProperties = new AbstractProperty[]{${properties.all}};
    }
    
    public ${modelClass}(ModelConfiguration config) {
    	this("", config);
    }

	${fields.getters}

    @Override
    public void load() {
    	try {
    		getPropertySupport().transmitAllToComponentOnly();
			Arrays.stream(allProperties).forEach(p -> p.load(this));
		} finally {
			getPropertySupport().enableAllTransmit();
		}
    }

    @Override
    public void save() {
		Arrays.stream(allProperties).forEach(AbstractProperty::save);
    }

    @Override
    public void setCurrentObject(final ${objectClass} value) {
        currentObjectProvider.setObject(value);
    }

    public IComponentBinding<${objectClass}> loadBinding() {
        return new IComponentBinding<${objectClass}>() {
        
            @Override
            public void addComponentValueChangeListener(final IComponentLink<${objectClass}> link) {
                // nope
            }
            
            @Override
			public void removeComponentValueChangeListener() {
				  // nope
			}
            
            @Override
            public void setComponentValue(final AbstractProperty source, final ${objectClass} value) {
                if (value != null) {
                    setCurrentObject(value);
                    load();
                }
            }
        };
    }
}
