package ${package};

import javax.annotation.processing.Generated;

import java.util.Arrays;

import ch.scaille.gui.mvc.GuiModel;
import ch.scaille.gui.mvc.IObjectGuiModel;
import ch.scaille.javabeans.IComponentBinding;
import ch.scaille.javabeans.IComponentLink;
import ch.scaille.javabeans.IComponentChangeSource;
import ch.scaille.javabeans.properties.AbstractProperty;
import ch.scaille.javabeans.properties.Configuration;

import ch.scaille.javabeans.persisters.IPersisterFactory.ObjectHolder;
import ch.scaille.javabeans.persisters.Persisters;
${imports}

@Generated(value = "${generator}", date = "${generationDate}", comments = "${commandLine}")
public class ${modelClass} extends GuiModel implements IObjectGuiModel<${objectClass}> {
   
    private final ObjectHolder<${objectClass}> currentObjectProvider = new ObjectHolder<>();

	${fields.declareStatic}

	${fields.declare}
	
	protected final AbstractProperty[] allProperties;
	
    public ${modelClass}(final String prefix, ModelConfiguration config) {
		super(config.ifNotSet(()->	GuiModel.createErrorProperty(prefix + "${objectClassSimpleName}-Error", config)));
		${fields.init}
		allProperties = new AbstractProperty[]{${properties.all}};
    }
            
    public ${modelClass}(ModelConfiguration config) {
    	this("", config);
    }

	public Class<?> getContainerClass() {
		return ${objectClass}.class;
	}

	${fields.getters}

    @Override
    public void load() {
    	try {
    		getPropertySupport().transmitAllToComponentOnly();
			Arrays.stream(allProperties).forEach(p -> p.load(this));
		} finally {
			getPropertySupport().enableAllTransmit();
		}
    }

    @Override
    public void save() {
		Arrays.stream(allProperties).forEach(AbstractProperty::save);
    }

    @Override
    public void setCurrentObject(final ${objectClass} value) {
        currentObjectProvider.setObject(value);
    }

    public IComponentBinding<${objectClass}> loadBinding() {
        return new IComponentBinding<>() {
        
            @Override
            public void addComponentValueChangeListener(final IComponentLink<${objectClass}> link) {
                // nope
            }
            
            @Override
			public void removeComponentValueChangeListener() {
				  // nope
			}
            
            @Override
            public void setComponentValue(final IComponentChangeSource source, final ${objectClass} value) {
                if (value != null) {
                    setCurrentObject(value);
                    load();
                }
            }
        };
    }
}
