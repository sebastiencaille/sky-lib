/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/dictionary": {
    get: operations["listAll"];
  };
  "/dictionary/current": {
    get: operations["current"];
  };
  "/testcase": {
    get: operations["listAll"];
  };
  "/testcase/current": {
    get: operations["current"];
  };
  "/context": {
    get: operations["getCurrent"];
    put: operations["setCurrent"];
  };
}

export interface components {
  schemas: {
    /**
     * @example {
     *   "dictionary": "dictionary",
     *   "identity": "{}",
     *   "testCase": "testCase"
     * }
     */
    Context: {
      identity: { [key: string]: unknown } & {
        id: unknown;
      };
      dictionary?: string;
      testCase?: string;
    };
    /**
     * @example {
     *   "dictionary": "dictionary",
     *   "testCase": "testCase"
     * }
     */
    ContextUpdate: {
      dictionary?: string;
      testCase?: string;
    };
    /**
     * @example {
     *   "transientId": "transientId",
     *   "description": "description"
     * }
     */
    Metadata: {
      transientId: string;
      description: string;
    };
    /**
     * @example {
     *   "actors": [
     *     null,
     *     null
     *   ],
     *   "selectorTypes": [
     *     "selectorTypes",
     *     "selectorTypes"
     *   ],
     *   "metadata": null,
     *   "roles": [
     *     null,
     *     null
     *   ],
     *   "testObjectFactories": [
     *     null,
     *     null
     *   ],
     *   "descriptions": {
     *     "key": {
     *       "description": "description",
     *       "humanReadable": "humanReadable"
     *     }
     *   }
     * }
     */
    TestDictionary: {
      metadata: components["schemas"]["DicoMetadata"];
      roles: components["schemas"]["TestRole"][];
      descriptions: {
        [key: string]: components["schemas"]["TestObjectDescription"];
      };
      actors: components["schemas"]["TestActor"][];
      testObjectFactories: components["schemas"]["TestParameterFactory"][];
      selectorTypes: string[];
    };
    /**
     * @example {
     *   "metadata": {
     *     "transientId": "transientId",
     *     "description": "description"
     *   },
     *   "pkgAndClassName": "pkgAndClassName",
     *   "steps": [
     *     {
     *       "actorRef": "actorRef",
     *       "reference": null,
     *       "parametersValue": [
     *         null,
     *         null
     *       ],
     *       "classifier": "",
     *       "roleRef": "roleRef",
     *       "actionRef": "actionRef",
     *       "ordinal": 0
     *     },
     *     {
     *       "actorRef": "actorRef",
     *       "reference": null,
     *       "parametersValue": [
     *         null,
     *         null
     *       ],
     *       "classifier": "",
     *       "roleRef": "roleRef",
     *       "actionRef": "actionRef",
     *       "ordinal": 0
     *     }
     *   ]
     * }
     */
    TestCase: {
      metadata?: components["schemas"]["Metadata"];
      steps: components["schemas"]["TestStep"][];
      pkgAndClassName: string;
    };
    AllDictMetadata: components["schemas"]["Metadata"];
    DicoMetadata: components["schemas"]["Metadata"];
    /** @description A test role */
    TestRole: components["schemas"]["DicoNamedObject"] &
      components["schemas"]["TestRole_allOf"];
    DicoNamedObject: components["schemas"]["NamedObject"];
    NamedObject: {
      id: string;
      name: string;
    };
    /** @description A test action */
    TestAction: components["schemas"]["DicoNamedObject"] &
      components["schemas"]["TestAction_allOf"];
    /** @description A test parameter factory (selectors factory, parameters factory) */
    TestApiParameter: components["schemas"]["DicoNamedObject"] &
      components["schemas"]["TestApiParameter_allOf"];
    StepClassifier: unknown;
    TestObjectDescriptions: {
      [key: string]: components["schemas"]["TestObjectDescription"];
    };
    /**
     * @description description of a test object
     * @example {
     *   "description": "description",
     *   "humanReadable": "humanReadable"
     * }
     */
    TestObjectDescription: {
      description?: string;
      humanReadable?: string;
    };
    /** @description A test actor */
    TestActor: components["schemas"]["DicoNamedObject"] &
      components["schemas"]["TestActor_allOf"];
    /** @description A test parameter factory (selectors factory, parameters factory) */
    TestParameterFactory: components["schemas"]["DicoNamedObject"] &
      components["schemas"]["TestParameterFactory_allOf"];
    AllTCMetadata: components["schemas"]["Metadata"];
    TCMetadata: components["schemas"]["Metadata"];
    /**
     * @example {
     *   "actorRef": "actorRef",
     *   "reference": null,
     *   "parametersValue": [
     *     null,
     *     null
     *   ],
     *   "classifier": "",
     *   "roleRef": "roleRef",
     *   "actionRef": "actionRef",
     *   "ordinal": 0
     * }
     */
    TestStep: {
      ordinal: number;
      actorRef: string;
      roleRef: string;
      actionRef: string;
      parametersValue: components["schemas"]["TestParameterValue"][];
      reference: components["schemas"]["TestReference"];
      classifier: unknown;
    };
    /** @description A parameter of the test step action */
    TestParameterValue: components["schemas"]["TCIdObject"] &
      components["schemas"]["TestParameterValue_allOf"];
    TCIdObject: components["schemas"]["IdObject"];
    IdObject: {
      id: string;
    };
    ComplexTypeContent: {
      [key: string]: components["schemas"]["TestParameterValue"];
    };
    /** @description a named reference to a test step */
    TestReference: components["schemas"]["TCTestParameterFactory"] &
      components["schemas"]["TestReference_allOf"];
    TCTestParameterFactory: components["schemas"]["TestParameterFactory_1"];
    /** @description A test parameter factory (selectors factory, parameters factory) */
    TestParameterFactory_1: components["schemas"]["DicoNamedObject"] &
      components["schemas"]["TestParameterFactory_allOf"];
    StepClassifier_1: components["schemas"]["StepClassifier"];
    Identity: { [key: string]: unknown } & {
      id: unknown;
    };
    /** @example null */
    TestRole_allOf: {
      actions: components["schemas"]["TestAction"][];
    };
    /** @example null */
    TestAction_allOf: {
      parameters: components["schemas"]["TestApiParameter"][];
      allowedClassifiers: components["schemas"]["StepClassifier"][];
      returnType: string;
    };
    /** @example null */
    TestApiParameter_allOf: {
      parameterType: string;
    };
    /** @example null */
    TestActor_allOf: {
      /** @description role of the actor */
      role: string;
    };
    /** @example null */
    TestParameterFactory_allOf: {
      mandatoryParameters?: unknown[];
      optionalParameters?: unknown[];
      nature?: string;
      parameterType?: string;
    };
    /** @example null */
    TestParameterValue_allOf: {
      apiParameterId: string;
      testParameterFactoryRef?: string;
      complexTypeValues: {
        [key: string]: components["schemas"]["TestParameterValue"];
      };
      simpleValue?: string;
    } & {
      type: unknown;
    };
    /** @example null */
    TestReference_allOf: {
      description?: string;
      testStepRef?: string;
    };
  };
}

export interface operations {
  listAll: {
    responses: {
      /** all  test cases */
      200: {
        content: {
          "application/json": components["schemas"]["AllTCMetadata"][];
        };
      };
    };
  };
  current: {
    responses: {
      /** current test case */
      200: {
        content: {
          "application/json": components["schemas"]["TestCase"];
        };
      };
    };
  };
  getCurrent: {
    responses: {
      /** current context */
      200: {
        content: {
          "application/json": components["schemas"]["Context"];
        };
      };
    };
  };
  setCurrent: {
    responses: {
      /** The new context, after it was set */
      200: {
        content: {
          "application/json": components["schemas"]["Context"];
        };
      };
    };
    /** context to set */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ContextUpdate"];
      };
    };
  };
}

export interface external {}
